# Each new term in the Fibonacci sequence is generated by adding the
# previous two terms. By starting with 1 and 2, the first 10 terms will be:

# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

# By considering the terms in the Fibonacci sequence whose values do not
# exceed four million, find the sum of the even-valued terms.


def fibonacci_numbers(cap):
    '''
    Gathers Fibonnaci numbers under the cap
    '''
    result = []
    i = 0
    while True:
        fibo_number = get_fibonacci_number_fast_rec(i)
        if fibo_number < cap:
            result.append(fibo_number)
            i = i + 1
        else:
            return result


def get_fibonacci_number_fast_rec(n):
    '''
    Recursive Fibonacci number generator effectively
    iterating the arguments
    Note: Limited by stack
    '''
    def get_fibonacci_number_wrapper(a, b, n):
        if n < 1:
            return a
        else:
            return get_fibonacci_number_wrapper(b, a + b, n - 1)
    return get_fibonacci_number_wrapper(0, 1, n)


def generate_fibonacci(cap):
    '''
    Generative Fibonacci number generator
    Much more efficient than recursion
    '''
    a = 0
    b = 1
    while a < cap:
        yield a
        a, b = b, a + b


def main():
    '''
    Find the sum of Fibonacci numbers who values are under 4 million

    Answer: 4613732
    '''
    cap = 4000000

    # Using recursion
    fibo_numbers = fibonacci_numbers(cap)
    result = sum(i for i in fibo_numbers if i % 2 == 0)
    print(result)

    # Using generator
    result = sum(i for i in generate_fibonacci(cap) if i % 2 == 0)
    print(result)


if __name__ == "__main__":
    main()
